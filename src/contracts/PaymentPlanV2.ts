/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace CyanPaymentPlanV2 {
  export type ItemStruct = {
    amount: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
    contractAddress: PromiseOrValue<string>;
    cyanVaultAddress: PromiseOrValue<string>;
    itemType: PromiseOrValue<BigNumberish>;
  };

  export type ItemStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    number
  ] & {
    amount: BigNumber;
    tokenId: BigNumber;
    contractAddress: string;
    cyanVaultAddress: string;
    itemType: number;
  };

  export type PlanStruct = {
    amount: PromiseOrValue<BigNumberish>;
    downPaymentPercent: PromiseOrValue<BigNumberish>;
    interestRate: PromiseOrValue<BigNumberish>;
    serviceFeeRate: PromiseOrValue<BigNumberish>;
    term: PromiseOrValue<BigNumberish>;
    totalNumberOfPayments: PromiseOrValue<BigNumberish>;
    counterPaidPayments: PromiseOrValue<BigNumberish>;
    autoRepayStatus: PromiseOrValue<BigNumberish>;
  };

  export type PlanStructOutput = [
    BigNumber,
    number,
    number,
    number,
    number,
    number,
    number,
    number
  ] & {
    amount: BigNumber;
    downPaymentPercent: number;
    interestRate: number;
    serviceFeeRate: number;
    term: number;
    totalNumberOfPayments: number;
    counterPaidPayments: number;
    autoRepayStatus: number;
  };
}

export declare namespace ISeaport {
  export type OfferItemStruct = {
    itemType: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
    identifierOrCriteria: PromiseOrValue<BigNumberish>;
    startAmount: PromiseOrValue<BigNumberish>;
    endAmount: PromiseOrValue<BigNumberish>;
  };

  export type OfferItemStructOutput = [
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    itemType: number;
    token: string;
    identifierOrCriteria: BigNumber;
    startAmount: BigNumber;
    endAmount: BigNumber;
  };

  export type ConsiderationItemStruct = {
    itemType: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
    identifierOrCriteria: PromiseOrValue<BigNumberish>;
    startAmount: PromiseOrValue<BigNumberish>;
    endAmount: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
  };

  export type ConsiderationItemStructOutput = [
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    itemType: number;
    token: string;
    identifierOrCriteria: BigNumber;
    startAmount: BigNumber;
    endAmount: BigNumber;
    recipient: string;
  };

  export type OrderParametersStruct = {
    offerer: PromiseOrValue<string>;
    zone: PromiseOrValue<string>;
    offer: ISeaport.OfferItemStruct[];
    consideration: ISeaport.ConsiderationItemStruct[];
    orderType: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    zoneHash: PromiseOrValue<BytesLike>;
    salt: PromiseOrValue<BigNumberish>;
    conduitKey: PromiseOrValue<BytesLike>;
    totalOriginalConsiderationItems: PromiseOrValue<BigNumberish>;
  };

  export type OrderParametersStructOutput = [
    string,
    string,
    ISeaport.OfferItemStructOutput[],
    ISeaport.ConsiderationItemStructOutput[],
    number,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber
  ] & {
    offerer: string;
    zone: string;
    offer: ISeaport.OfferItemStructOutput[];
    consideration: ISeaport.ConsiderationItemStructOutput[];
    orderType: number;
    startTime: BigNumber;
    endTime: BigNumber;
    zoneHash: string;
    salt: BigNumber;
    conduitKey: string;
    totalOriginalConsiderationItems: BigNumber;
  };

  export type AdvancedOrderStruct = {
    parameters: ISeaport.OrderParametersStruct;
    numerator: PromiseOrValue<BigNumberish>;
    denominator: PromiseOrValue<BigNumberish>;
    signature: PromiseOrValue<BytesLike>;
    extraData: PromiseOrValue<BytesLike>;
  };

  export type AdvancedOrderStructOutput = [
    ISeaport.OrderParametersStructOutput,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    parameters: ISeaport.OrderParametersStructOutput;
    numerator: BigNumber;
    denominator: BigNumber;
    signature: string;
    extraData: string;
  };

  export type CriteriaResolverStruct = {
    orderIndex: PromiseOrValue<BigNumberish>;
    side: PromiseOrValue<BigNumberish>;
    index: PromiseOrValue<BigNumberish>;
    identifier: PromiseOrValue<BigNumberish>;
    criteriaProof: PromiseOrValue<BytesLike>[];
  };

  export type CriteriaResolverStructOutput = [
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    string[]
  ] & {
    orderIndex: BigNumber;
    side: number;
    index: BigNumber;
    identifier: BigNumber;
    criteriaProof: string[];
  };

  export type FulfillmentComponentStruct = {
    orderIndex: PromiseOrValue<BigNumberish>;
    itemIndex: PromiseOrValue<BigNumberish>;
  };

  export type FulfillmentComponentStructOutput = [BigNumber, BigNumber] & {
    orderIndex: BigNumber;
    itemIndex: BigNumber;
  };

  export type FulfillmentStruct = {
    offerComponents: ISeaport.FulfillmentComponentStruct[];
    considerationComponents: ISeaport.FulfillmentComponentStruct[];
  };

  export type FulfillmentStructOutput = [
    ISeaport.FulfillmentComponentStructOutput[],
    ISeaport.FulfillmentComponentStructOutput[]
  ] & {
    offerComponents: ISeaport.FulfillmentComponentStructOutput[];
    considerationComponents: ISeaport.FulfillmentComponentStructOutput[];
  };

  export type OfferDataStruct = {
    orders: ISeaport.AdvancedOrderStruct[];
    criteriaResolvers: ISeaport.CriteriaResolverStruct[];
    fulfillments: ISeaport.FulfillmentStruct[];
    recipient: PromiseOrValue<string>;
  };

  export type OfferDataStructOutput = [
    ISeaport.AdvancedOrderStructOutput[],
    ISeaport.CriteriaResolverStructOutput[],
    ISeaport.FulfillmentStructOutput[],
    string
  ] & {
    orders: ISeaport.AdvancedOrderStructOutput[];
    criteriaResolvers: ISeaport.CriteriaResolverStructOutput[];
    fulfillments: ISeaport.FulfillmentStructOutput[];
    recipient: string;
  };
}

export interface PaymentPlanV2Interface extends utils.Interface {
  functions: {
    "createPawn((uint256,uint256,address,address,uint8),(uint256,uint32,uint32,uint32,uint32,uint8,uint8,uint8),uint256,uint256,bytes)": FunctionFragment;
    "createBNPL((uint256,uint256,address,address,uint8),(uint256,uint32,uint32,uint32,uint32,uint8,uint8,uint8),uint256,uint256,bytes)": FunctionFragment;
    "pay(uint256,bool)": FunctionFragment;
    "getExpectedPlan((uint256,uint32,uint32,uint32,uint32,uint8,uint8,uint8))": FunctionFragment;
    "getPaymentInfoByPlanId(uint256,bool)": FunctionFragment;
    "getCurrencyAddressByPlanId(uint256)": FunctionFragment;
    "earlyUnwind(uint256,uint256,(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes)[],(uint256,uint8,uint256,uint256,bytes32[])[],((uint256,uint256)[],(uint256,uint256)[])[],address))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createPawn"
      | "createBNPL"
      | "pay"
      | "getExpectedPlan"
      | "getPaymentInfoByPlanId"
      | "getCurrencyAddressByPlanId"
      | "earlyUnwind"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createPawn",
    values: [
      CyanPaymentPlanV2.ItemStruct,
      CyanPaymentPlanV2.PlanStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createBNPL",
    values: [
      CyanPaymentPlanV2.ItemStruct,
      CyanPaymentPlanV2.PlanStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpectedPlan",
    values: [CyanPaymentPlanV2.PlanStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentInfoByPlanId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrencyAddressByPlanId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "earlyUnwind",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      ISeaport.OfferDataStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: "createPawn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createBNPL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentInfoByPlanId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrencyAddressByPlanId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlyUnwind",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PaymentPlanV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PaymentPlanV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createPawn(
      item: CyanPaymentPlanV2.ItemStruct,
      plan: CyanPaymentPlanV2.PlanStruct,
      planId: PromiseOrValue<BigNumberish>,
      signedBlockNum: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createBNPL(
      item: CyanPaymentPlanV2.ItemStruct,
      plan: CyanPaymentPlanV2.PlanStruct,
      planId: PromiseOrValue<BigNumberish>,
      signedBlockNum: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pay(
      planId: PromiseOrValue<BigNumberish>,
      isEarlyPayment: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getExpectedPlan(
      plan: CyanPaymentPlanV2.PlanStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getPaymentInfoByPlanId(
      planId: PromiseOrValue<BigNumberish>,
      isEarlyPayment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getCurrencyAddressByPlanId(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    earlyUnwind(
      planId: PromiseOrValue<BigNumberish>,
      sellPrice: PromiseOrValue<BigNumberish>,
      offer: ISeaport.OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createPawn(
    item: CyanPaymentPlanV2.ItemStruct,
    plan: CyanPaymentPlanV2.PlanStruct,
    planId: PromiseOrValue<BigNumberish>,
    signedBlockNum: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createBNPL(
    item: CyanPaymentPlanV2.ItemStruct,
    plan: CyanPaymentPlanV2.PlanStruct,
    planId: PromiseOrValue<BigNumberish>,
    signedBlockNum: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pay(
    planId: PromiseOrValue<BigNumberish>,
    isEarlyPayment: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getExpectedPlan(
    plan: CyanPaymentPlanV2.PlanStruct,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  getPaymentInfoByPlanId(
    planId: PromiseOrValue<BigNumberish>,
    isEarlyPayment: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  getCurrencyAddressByPlanId(
    planId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  earlyUnwind(
    planId: PromiseOrValue<BigNumberish>,
    sellPrice: PromiseOrValue<BigNumberish>,
    offer: ISeaport.OfferDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createPawn(
      item: CyanPaymentPlanV2.ItemStruct,
      plan: CyanPaymentPlanV2.PlanStruct,
      planId: PromiseOrValue<BigNumberish>,
      signedBlockNum: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createBNPL(
      item: CyanPaymentPlanV2.ItemStruct,
      plan: CyanPaymentPlanV2.PlanStruct,
      planId: PromiseOrValue<BigNumberish>,
      signedBlockNum: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    pay(
      planId: PromiseOrValue<BigNumberish>,
      isEarlyPayment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    getExpectedPlan(
      plan: CyanPaymentPlanV2.PlanStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getPaymentInfoByPlanId(
      planId: PromiseOrValue<BigNumberish>,
      isEarlyPayment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getCurrencyAddressByPlanId(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    earlyUnwind(
      planId: PromiseOrValue<BigNumberish>,
      sellPrice: PromiseOrValue<BigNumberish>,
      offer: ISeaport.OfferDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    createPawn(
      item: CyanPaymentPlanV2.ItemStruct,
      plan: CyanPaymentPlanV2.PlanStruct,
      planId: PromiseOrValue<BigNumberish>,
      signedBlockNum: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createBNPL(
      item: CyanPaymentPlanV2.ItemStruct,
      plan: CyanPaymentPlanV2.PlanStruct,
      planId: PromiseOrValue<BigNumberish>,
      signedBlockNum: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pay(
      planId: PromiseOrValue<BigNumberish>,
      isEarlyPayment: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getExpectedPlan(
      plan: CyanPaymentPlanV2.PlanStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentInfoByPlanId(
      planId: PromiseOrValue<BigNumberish>,
      isEarlyPayment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrencyAddressByPlanId(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earlyUnwind(
      planId: PromiseOrValue<BigNumberish>,
      sellPrice: PromiseOrValue<BigNumberish>,
      offer: ISeaport.OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createPawn(
      item: CyanPaymentPlanV2.ItemStruct,
      plan: CyanPaymentPlanV2.PlanStruct,
      planId: PromiseOrValue<BigNumberish>,
      signedBlockNum: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createBNPL(
      item: CyanPaymentPlanV2.ItemStruct,
      plan: CyanPaymentPlanV2.PlanStruct,
      planId: PromiseOrValue<BigNumberish>,
      signedBlockNum: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pay(
      planId: PromiseOrValue<BigNumberish>,
      isEarlyPayment: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getExpectedPlan(
      plan: CyanPaymentPlanV2.PlanStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaymentInfoByPlanId(
      planId: PromiseOrValue<BigNumberish>,
      isEarlyPayment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrencyAddressByPlanId(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earlyUnwind(
      planId: PromiseOrValue<BigNumberish>,
      sellPrice: PromiseOrValue<BigNumberish>,
      offer: ISeaport.OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
